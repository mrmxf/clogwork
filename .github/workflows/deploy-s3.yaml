# Copyright ©2017-2025  Mr MXF   info@mrmxf.com
# BSD-3-Clause License           https://opensource.org/license/bsd-3-clause/
# clogwork - collection of reusable actions and tools for Mr MXF project.
#      _                _                       ____
#   __| |  ___   _ __  | |  ___   _  _     ___ |__ /
#  / _` | / -_) | '_ \ | | / _ \ | || |   (_-<  |_ \
#  \__,_| \___| | .__/ |_| \___/  \_, |   /__/ |___/
#               |_|               |__/              
#
#  GitHub Workflow to deploy to an s3 bucket

name: deploy-s3
run-name: 🥷${{ github.actor }} 🏃‍➡️ ${{ github.workflow }}.${{ github.job }}(clogwork/.../build-golang)"
env:
  CLOGWORK_REPO: "mrmxf/clogwork/.github/workflows"
  CLOGWORK_FLOW: "mrmxf/clogwork/.github/workflows/build-golang"
on:
  workflow_call:
    inputs:
      artifact-name:
        required: true
        type: string
      make:
        required: false
        type: string
    secrets:
      aws_access_key_id:
        required: false
      aws_secret_access_key:
        required: false
      get_clog:
        required: true
      s3_bucket:
        required: true
      webhook_slack:
        required: false
    outputs:
      message:
        description: "Result of the deploy for announcing on slack"
        value: ${{ jobs.deploy-s3.outputs.message }}

jobs:
  deploy-s3:
    runs-on: ubuntu-latest
    outputs:
      message: ${{ steps.deploy-s3.outputs.message }}

    steps:
      - # ---------------------------------------------------------------------
        id: checkout
        name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - # ---------------------------------------------------------------------
        id: artifacts
        name: artifact(${{ inputs.artifact-name }}) → tmp/
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: tmp
      - # ---------------------------------------------------------------------
        id: get-clog
        name: get clog
        env:
          GET_CLOG: ${{ secrets.get_clog }}
        run: |
          eval "$GET_CLOG"
          clog Log -I "Reusable workflow: ${{ env.CLOGWORK_FLOW}}"
      - # ---------------------------------------------------------------------
        id: deploy-s3
        name: golang deploy artifacts to s3 with clog
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          S3_BUCKET: ${{ secrets.s3_bucket }}
          MAKE: ${{ inputs.make }}
        run: |
          [ -n "$MAKE" ] && clog Log -I "deploy with make: \"$MAKE\""
          CACHE="$(clog workflow-message-file)"
          rm -f $CACHE >/dev/null 2>&1  # delete any notify file
          clog deploy MAKE "$MAKE"
          if [ -f $CACHE ]; then
            echo "message=$(cat $CACHE)" >> $GITHUB_OUTPUT
          else
            mImage="$DOCKER_NS/${{ github.event.repository.name }}:"
            printf "message=deploy: $mImage, github action: $CLOGWORK_FLOW" >> $GITHUB_OUTPUT
          fi
      - # ---------------------------------------------------------------------
        id: notify
        if: ${{ env.HOOK_SLACK != '' }}
        name: notify-team
        env:
          MESSAGE: ${{ steps.deploy-s3.outputs.message }}
          ACTOR: ${{ github.actor }}
          EVENT: ${{ github.event_name }}
          JOB: ${{ github.job }}
          REPO: ${{ github.repository }}
          REF: ${{ github.ref }}
          REF_TYPE: ${{ github.ref_type }}
          WORKFLOW: ${{ github.workflow }}
          HOOK_SLACK:  ${{ secrets.webhook_slack }}
        run: |
          clog Log -I "Rx message:\n$MESSAGE"
          MSG="msg: $MESSAGE by: $ACTOR, workflow: $WORKFLOW, repo: $REPO:$REF($REF_TYPE), job: $JOB, event: $EVENT"
          clog Log -I "Tx message:\n$MSG"
          # use clog to ping slack via the webhook
          clog Slack "$MSG"
          clog Log -I "done"
